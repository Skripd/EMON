# source: http://localhost:4466/
# timestamp: Fri Feb 21 2020 11:10:10 GMT+0100 (Central European Standard Time)

type AggregateMeasurement {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Measurement implements Node {
  id: ID!
  gasUsage: Int!
  usageHigh: Int!
  usageLow: Int!
  returnHigh: Int!
  returnLow: Int!
  currentUsage: Int!
  dateRecorded: DateTime!
  dateAddedToDatabase: DateTime!
}

"""A connection to a list of items."""
type MeasurementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MeasurementEdge]!
  aggregate: AggregateMeasurement!
}

input MeasurementCreateInput {
  id: ID
  gasUsage: Int!
  usageHigh: Int!
  usageLow: Int!
  returnHigh: Int!
  returnLow: Int!
  currentUsage: Int!
  dateRecorded: DateTime!
}

"""An edge in a connection."""
type MeasurementEdge {
  """The item at the end of the edge."""
  node: Measurement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MeasurementOrderByInput {
  id_ASC
  id_DESC
  gasUsage_ASC
  gasUsage_DESC
  usageHigh_ASC
  usageHigh_DESC
  usageLow_ASC
  usageLow_DESC
  returnHigh_ASC
  returnHigh_DESC
  returnLow_ASC
  returnLow_DESC
  currentUsage_ASC
  currentUsage_DESC
  dateRecorded_ASC
  dateRecorded_DESC
  dateAddedToDatabase_ASC
  dateAddedToDatabase_DESC
}

type MeasurementPreviousValues {
  id: ID!
  gasUsage: Int!
  usageHigh: Int!
  usageLow: Int!
  returnHigh: Int!
  returnLow: Int!
  currentUsage: Int!
  dateRecorded: DateTime!
  dateAddedToDatabase: DateTime!
}

type MeasurementSubscriptionPayload {
  mutation: MutationType!
  node: Measurement
  updatedFields: [String!]
  previousValues: MeasurementPreviousValues
}

input MeasurementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MeasurementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MeasurementWhereInput
}

input MeasurementUpdateInput {
  gasUsage: Int
  usageHigh: Int
  usageLow: Int
  returnHigh: Int
  returnLow: Int
  currentUsage: Int
  dateRecorded: DateTime
}

input MeasurementUpdateManyMutationInput {
  gasUsage: Int
  usageHigh: Int
  usageLow: Int
  returnHigh: Int
  returnLow: Int
  currentUsage: Int
  dateRecorded: DateTime
}

input MeasurementWhereInput {
  """Logical AND on all given filters."""
  AND: [MeasurementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  gasUsage: Int

  """All values that are not equal to given value."""
  gasUsage_not: Int

  """All values that are contained in given list."""
  gasUsage_in: [Int!]

  """All values that are not contained in given list."""
  gasUsage_not_in: [Int!]

  """All values less than the given value."""
  gasUsage_lt: Int

  """All values less than or equal the given value."""
  gasUsage_lte: Int

  """All values greater than the given value."""
  gasUsage_gt: Int

  """All values greater than or equal the given value."""
  gasUsage_gte: Int
  usageHigh: Int

  """All values that are not equal to given value."""
  usageHigh_not: Int

  """All values that are contained in given list."""
  usageHigh_in: [Int!]

  """All values that are not contained in given list."""
  usageHigh_not_in: [Int!]

  """All values less than the given value."""
  usageHigh_lt: Int

  """All values less than or equal the given value."""
  usageHigh_lte: Int

  """All values greater than the given value."""
  usageHigh_gt: Int

  """All values greater than or equal the given value."""
  usageHigh_gte: Int
  usageLow: Int

  """All values that are not equal to given value."""
  usageLow_not: Int

  """All values that are contained in given list."""
  usageLow_in: [Int!]

  """All values that are not contained in given list."""
  usageLow_not_in: [Int!]

  """All values less than the given value."""
  usageLow_lt: Int

  """All values less than or equal the given value."""
  usageLow_lte: Int

  """All values greater than the given value."""
  usageLow_gt: Int

  """All values greater than or equal the given value."""
  usageLow_gte: Int
  returnHigh: Int

  """All values that are not equal to given value."""
  returnHigh_not: Int

  """All values that are contained in given list."""
  returnHigh_in: [Int!]

  """All values that are not contained in given list."""
  returnHigh_not_in: [Int!]

  """All values less than the given value."""
  returnHigh_lt: Int

  """All values less than or equal the given value."""
  returnHigh_lte: Int

  """All values greater than the given value."""
  returnHigh_gt: Int

  """All values greater than or equal the given value."""
  returnHigh_gte: Int
  returnLow: Int

  """All values that are not equal to given value."""
  returnLow_not: Int

  """All values that are contained in given list."""
  returnLow_in: [Int!]

  """All values that are not contained in given list."""
  returnLow_not_in: [Int!]

  """All values less than the given value."""
  returnLow_lt: Int

  """All values less than or equal the given value."""
  returnLow_lte: Int

  """All values greater than the given value."""
  returnLow_gt: Int

  """All values greater than or equal the given value."""
  returnLow_gte: Int
  currentUsage: Int

  """All values that are not equal to given value."""
  currentUsage_not: Int

  """All values that are contained in given list."""
  currentUsage_in: [Int!]

  """All values that are not contained in given list."""
  currentUsage_not_in: [Int!]

  """All values less than the given value."""
  currentUsage_lt: Int

  """All values less than or equal the given value."""
  currentUsage_lte: Int

  """All values greater than the given value."""
  currentUsage_gt: Int

  """All values greater than or equal the given value."""
  currentUsage_gte: Int
  dateRecorded: DateTime

  """All values that are not equal to given value."""
  dateRecorded_not: DateTime

  """All values that are contained in given list."""
  dateRecorded_in: [DateTime!]

  """All values that are not contained in given list."""
  dateRecorded_not_in: [DateTime!]

  """All values less than the given value."""
  dateRecorded_lt: DateTime

  """All values less than or equal the given value."""
  dateRecorded_lte: DateTime

  """All values greater than the given value."""
  dateRecorded_gt: DateTime

  """All values greater than or equal the given value."""
  dateRecorded_gte: DateTime
  dateAddedToDatabase: DateTime

  """All values that are not equal to given value."""
  dateAddedToDatabase_not: DateTime

  """All values that are contained in given list."""
  dateAddedToDatabase_in: [DateTime!]

  """All values that are not contained in given list."""
  dateAddedToDatabase_not_in: [DateTime!]

  """All values less than the given value."""
  dateAddedToDatabase_lt: DateTime

  """All values less than or equal the given value."""
  dateAddedToDatabase_lte: DateTime

  """All values greater than the given value."""
  dateAddedToDatabase_gt: DateTime

  """All values greater than or equal the given value."""
  dateAddedToDatabase_gte: DateTime
}

input MeasurementWhereUniqueInput {
  id: ID
  dateRecorded: DateTime
}

type Mutation {
  createMeasurement(data: MeasurementCreateInput!): Measurement!
  updateMeasurement(data: MeasurementUpdateInput!, where: MeasurementWhereUniqueInput!): Measurement
  deleteMeasurement(where: MeasurementWhereUniqueInput!): Measurement
  upsertMeasurement(where: MeasurementWhereUniqueInput!, create: MeasurementCreateInput!, update: MeasurementUpdateInput!): Measurement!
  updateManyMeasurements(data: MeasurementUpdateManyMutationInput!, where: MeasurementWhereInput): BatchPayload!
  deleteManyMeasurements(where: MeasurementWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  measurements(where: MeasurementWhereInput, orderBy: MeasurementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Measurement]!
  measurement(where: MeasurementWhereUniqueInput!): Measurement
  measurementsConnection(where: MeasurementWhereInput, orderBy: MeasurementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MeasurementConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  measurement(where: MeasurementSubscriptionWhereInput): MeasurementSubscriptionPayload
}
